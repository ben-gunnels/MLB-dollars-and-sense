@page
@model SearchModel  
@{
    ViewData["Title"] = "Players List";
}

@{
  var batterScoreKeys = new List<string>
  {
      "b_war_score", "b_batting_avg_score","b_onbase_perc_score", "b_slugging_perc_score", "b_onbase_plus_slugging_score", "b_onbase_plus_slugging_plus_score", "b_rbat_plus_score", "b_tb_score",
      "b_gidp_score", "b_hbp_score", "b_sf_score", "b_ibb_score", "b_war_per_dollar_score", "b_h_per_dollar_score",
      "b_hr_per_dollar_score", "b_doubles_per_dollar_score","b_triples_per_dollar_score", "b_sb_per_dollar_score", "b_bb_per_dollar_score", 
      "b_tb_per_dollar_score", "b_games_per_dollar_score", "ops_plus_per_dollar_score"
  };
  
  var batterColumnLabels = new List<string>
  {
      "WAR", "AVG","OBP", "SLG", "OPS", "OPS+", "RBAT+", "TB",
      "GIDP", "HBP", "SF", "IBB", "WAR/$", "H/$",
      "HR/$", "2B/$","3B/$", "SB/$", "BB/$", 
      "TB/$", "G/$", "OPS+/$"
  };

  // Create a list of keys for the pitcher statistics
  var pitcherScoreKeys = new List<string>
  {
      "p_war_score", "p_w_score", "p_win_loss_perc_score", "p_earned_run_avg_score", "p_g_score", "p_cg_score", "p_ip_score",
      "p_earned_run_avg_plus_score", "p_fip_score", "p_whip_score", "p_hits_per_nine_score", "p_hr_per_nine_score",
      "p_bb_per_nine_score", "p_so_per_nine_score", "p_strikeouts_per_base_on_balls_score",
      "p_war_per_dollar_score", "p_w_per_dollar_score", "p_ip_per_dollar_score", "p_so_per_dollar_score",
      "p_so_per_nine_per_dollar_score", "p_earned_run_avg_plus_per_dollar_score"
  };

    var pitcherColumnLabels = new List<string>
    {
      "WAR", "W", "WL%", "ERA", "G", "CG", "IP", "ERA+", "FIP", "WHIP", "H9",
      "HR9", "BB9", "SO9", "SO/BB", "WAR/$", "W/$", "IP/$", "SO/$", "SO9/$", "ERA+/$"
    };
}
<h1>Search for an active player</h1>

<div class="buttonForm">   
    <form method="get">
      <input type="text" id="playerSearch" list="playerSuggestions" placeholder="Search Player..." name="playerName"/>
      <datalist id="playerSuggestions"></datalist>
      <button type="submit">Submit</button>
    </form>
</div>

@if (Model.Batter != null && Model.Batter.Count > 0)
{   
    <h3 style="margin-top: 4rem;">Search Results</h3>
    <h3 style="margin-top: 4rem">@DataPresentationHelper.CapitalizeName(Model.Batter[0].Name)</h3>
    <table style="width: 100%; border-collapse: collapse; table-layout: fixed;">
      <thead style="position: sticky; top: 0; background-color: #f2f2f2;">
          <tr >
              <th style="width: 40px;">Year</th>
              @foreach (string label in batterColumnLabels)
              {
                  <th style="width:40px; color: black;">@label</th>  <!-- Add headers dynamically if needed -->
              }
          </tr>
      </thead>
      <tbody>
        @foreach (var batter in Model.Batter)
        {
            <tr class="playerTableRow">
                <td style="width: 40px; text-align: center; font-size: 14px;">@batter.Year</td>
                @foreach (string key in batterScoreKeys)
                {
                  double score = (double)JsonHelper.GetFloatFromJsonElement(batter.PlayerYear[key]);
                  double[] colors = DataPresentationHelper.ColorData(score);
                  double red = colors[0];
                  double green = colors[1];

                  <td style="width: 40px; text-align: center; font-size: 14px; background-color: rgb(@red, @green, 0);">
                      @Math.Round(DataPresentationHelper.ZScoreToPercentile(score)*100, 0)
                  </td>
                }
            </tr>
        }
    </tbody>
</table>
}
else if (Model.Pitcher != null && Model.Pitcher.Count > 0)
{
    <h3 style="margin-top: 4rem;">Search Results</h3>
    <h3 style="margin-top: 4rem">@DataPresentationHelper.CapitalizeName(Model.Pitcher[0].Name)</h3>
    <table style="width: 100%; border-collapse: collapse; table-layout: fixed;">
    <thead style="position: sticky; top: 0; background-color: #f2f2f2;">
        <tr >
            <th style="width: 40px;">Year</th>
            @foreach (string label in pitcherColumnLabels)
            {
                <th style="width:40px; color: black;">@label</th>  <!-- Add headers dynamically if needed -->
            }
        </tr>
    </thead>
    <tbody>
    @foreach (var pitcher in Model.Pitcher)
    {
        <tr class="playerTableRow">
            <td style="width: 40px; text-align: center; font-size: 14px;">@pitcher.Year</td>
            @foreach (string key in pitcherScoreKeys)
            {
                double score = Math.Round((double)JsonHelper.GetFloatFromJsonElement(pitcher.PlayerYear[key]), 1);
                double[] colors = DataPresentationHelper.ColorData(score);
                double red = colors[0];
                double green = colors[1];

                <td style="width: 40px; text-align: center; font-size: 14px; background-color: rgb(@red, @green, 0);">
                    @Math.Round(DataPresentationHelper.ZScoreToPercentile(score)*100, 0)
                </td>
            }
        </tr>
    }
    </tbody>
    </table>
} else 
{
  <p>No players found for '@Model.PlayerName'</p>
}


<script>
    document.addEventListener("DOMContentLoaded", function() {
        let inputField = document.getElementById("playerSearch");
        let dataList = document.getElementById("playerSuggestions");

        inputField.addEventListener("input", function() {
            let query = this.value;
            if (query.length < 2) {
                dataList.innerHTML = "";
                return;
            }

            fetch(`/Search?handler=SearchSuggestions&query=${query}`)
                .then(response => response.json())
                .then(data => {
                    dataList.innerHTML = "";
                    data.forEach(player => {
                        let option = document.createElement("option");
                        option.value = player;
                        dataList.appendChild(option);
                    });
                })
                .catch(error => console.error("Error fetching suggestions:", error));
        });
    });
</script>